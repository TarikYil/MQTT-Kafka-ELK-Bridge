version: '3.8'
services:
  mqtt-broker:
    image: eclipse-mosquitto:latest
    container_name: mqtt_broker
    ports:
      - "${MQTT_PORT}:${MQTT_PORT}"
    volumes:
      - ./mqtt/broker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt-data:/mosquitto/data
      - mqtt-logs:/mosquitto/log
    networks:
      - elk-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - elk-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "5"

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    hostname: kafka
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka-data:/kafka/data
    networks:
      - elk-network
    restart: always

  kafka-manager:
    image: hlebalbau/kafka-manager:stable
    container_name: kafka_manager
    ports:
      - "${KAFKA_MANAGER_PORT}:${KAFKA_MANAGER_PORT}"
    links:
      - zookeeper
      - kafka
    environment:
      ZK_HOSTS: ${ZK_HOSTS}
      APPLICATION_SECRET: ${APPLICATION_SECRET}
      KM_ARGS: ${KM_ARGS}
    networks:
      - elk-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "5"

  logstash:
    build:
      context: ./logstash
    container_name: logstash
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/
    ports:
      - "${LOGSTASH_PORT}:${LOGSTASH_PORT}"
      - "9600:9600"
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - elk-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    container_name: elasticsearch
    environment:
      - discovery.type=${DISCOVERY_TYPE}
      - xpack.security.enabled=${XPACK_SECURITY_ENABLED}
    ports:
      - "${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}"
    networks:
      - elk-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    container_name: kibana
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    environment:
      - ELASTICSEARCH_HOSTS=http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
    depends_on:
      - elasticsearch
    networks:
      - elk-network
    restart: unless-stopped

  publisher:
    build:
      context: ./mqtt
    container_name: publisher
    depends_on:
      - mqtt-broker
      - kafka
    env_file:
      - .env
    networks:
      - elk-network
    restart: unless-stopped

  consumer:
    build:
      context: ./mqtt
    container_name: consumer
    command: ["python", "subscriber.py"]
    depends_on:
      - kafka
    env_file:
      - .env
    networks:
      - elk-network
    restart: unless-stopped

volumes:
  mqtt-data:
  mqtt-logs:
  zookeeper-data:
  zookeeper-datalog:
  kafka-data:

networks:
  elk-network:
    driver: bridge
